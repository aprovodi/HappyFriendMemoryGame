//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HappyFriendMemoryGame.WpfBrowserApplication.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IGameBoardService")]
    public interface IGameBoardService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameBoardService/GetData", ReplyAction="http://tempuri.org/IGameBoardService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGameBoardService/GetData", ReplyAction="http://tempuri.org/IGameBoardService/GetDataResponse")]
        System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState);
        
        string EndGetData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameBoardService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IGameBoardService/GetDataUsingDataContractResponse")]
        HappyFriendMemoryGame.WcfService.CompositeType GetDataUsingDataContract(HappyFriendMemoryGame.WcfService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGameBoardService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IGameBoardService/GetDataUsingDataContractResponse")]
        System.IAsyncResult BeginGetDataUsingDataContract(HappyFriendMemoryGame.WcfService.CompositeType composite, System.AsyncCallback callback, object asyncState);
        
        HappyFriendMemoryGame.WcfService.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameBoardService/getNewBoard", ReplyAction="http://tempuri.org/IGameBoardService/getNewBoardResponse")]
        HappyFriendMemoryGame.WcfService.Board getNewBoard(int value);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGameBoardService/getNewBoard", ReplyAction="http://tempuri.org/IGameBoardService/getNewBoardResponse")]
        System.IAsyncResult BegingetNewBoard(int value, System.AsyncCallback callback, object asyncState);
        
        HappyFriendMemoryGame.WcfService.Board EndgetNewBoard(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameBoardServiceChannel : HappyFriendMemoryGame.WpfBrowserApplication.ServiceReference1.IGameBoardService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HappyFriendMemoryGame.WcfService.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HappyFriendMemoryGame.WcfService.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getNewBoardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getNewBoardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HappyFriendMemoryGame.WcfService.Board Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HappyFriendMemoryGame.WcfService.Board)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameBoardServiceClient : System.ServiceModel.ClientBase<HappyFriendMemoryGame.WpfBrowserApplication.ServiceReference1.IGameBoardService>, HappyFriendMemoryGame.WpfBrowserApplication.ServiceReference1.IGameBoardService {
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataUsingDataContractDelegate;
        
        private EndOperationDelegate onEndGetDataUsingDataContractDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataUsingDataContractCompletedDelegate;
        
        private BeginOperationDelegate onBegingetNewBoardDelegate;
        
        private EndOperationDelegate onEndgetNewBoardDelegate;
        
        private System.Threading.SendOrPostCallback ongetNewBoardCompletedDelegate;
        
        public GameBoardServiceClient() {
        }
        
        public GameBoardServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameBoardServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameBoardServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameBoardServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<GetDataUsingDataContractCompletedEventArgs> GetDataUsingDataContractCompleted;
        
        public event System.EventHandler<getNewBoardCompletedEventArgs> getNewBoardCompleted;
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int value = ((int)(inValues[0]));
            return this.BeginGetData(value, callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            string retVal = this.EndGetData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync(int value) {
            this.GetDataAsync(value, null);
        }
        
        public void GetDataAsync(int value, object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, new object[] {
                        value}, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        public HappyFriendMemoryGame.WcfService.CompositeType GetDataUsingDataContract(HappyFriendMemoryGame.WcfService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDataUsingDataContract(HappyFriendMemoryGame.WcfService.CompositeType composite, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HappyFriendMemoryGame.WcfService.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result) {
            return base.Channel.EndGetDataUsingDataContract(result);
        }
        
        private System.IAsyncResult OnBeginGetDataUsingDataContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HappyFriendMemoryGame.WcfService.CompositeType composite = ((HappyFriendMemoryGame.WcfService.CompositeType)(inValues[0]));
            return this.BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        private object[] OnEndGetDataUsingDataContract(System.IAsyncResult result) {
            HappyFriendMemoryGame.WcfService.CompositeType retVal = this.EndGetDataUsingDataContract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataUsingDataContractCompleted(object state) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataUsingDataContractAsync(HappyFriendMemoryGame.WcfService.CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        public void GetDataUsingDataContractAsync(HappyFriendMemoryGame.WcfService.CompositeType composite, object userState) {
            if ((this.onBeginGetDataUsingDataContractDelegate == null)) {
                this.onBeginGetDataUsingDataContractDelegate = new BeginOperationDelegate(this.OnBeginGetDataUsingDataContract);
            }
            if ((this.onEndGetDataUsingDataContractDelegate == null)) {
                this.onEndGetDataUsingDataContractDelegate = new EndOperationDelegate(this.OnEndGetDataUsingDataContract);
            }
            if ((this.onGetDataUsingDataContractCompletedDelegate == null)) {
                this.onGetDataUsingDataContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataUsingDataContractDelegate, new object[] {
                        composite}, this.onEndGetDataUsingDataContractDelegate, this.onGetDataUsingDataContractCompletedDelegate, userState);
        }
        
        public HappyFriendMemoryGame.WcfService.Board getNewBoard(int value) {
            return base.Channel.getNewBoard(value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetNewBoard(int value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetNewBoard(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HappyFriendMemoryGame.WcfService.Board EndgetNewBoard(System.IAsyncResult result) {
            return base.Channel.EndgetNewBoard(result);
        }
        
        private System.IAsyncResult OnBegingetNewBoard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int value = ((int)(inValues[0]));
            return this.BegingetNewBoard(value, callback, asyncState);
        }
        
        private object[] OnEndgetNewBoard(System.IAsyncResult result) {
            HappyFriendMemoryGame.WcfService.Board retVal = this.EndgetNewBoard(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetNewBoardCompleted(object state) {
            if ((this.getNewBoardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getNewBoardCompleted(this, new getNewBoardCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getNewBoardAsync(int value) {
            this.getNewBoardAsync(value, null);
        }
        
        public void getNewBoardAsync(int value, object userState) {
            if ((this.onBegingetNewBoardDelegate == null)) {
                this.onBegingetNewBoardDelegate = new BeginOperationDelegate(this.OnBegingetNewBoard);
            }
            if ((this.onEndgetNewBoardDelegate == null)) {
                this.onEndgetNewBoardDelegate = new EndOperationDelegate(this.OnEndgetNewBoard);
            }
            if ((this.ongetNewBoardCompletedDelegate == null)) {
                this.ongetNewBoardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetNewBoardCompleted);
            }
            base.InvokeAsync(this.onBegingetNewBoardDelegate, new object[] {
                        value}, this.onEndgetNewBoardDelegate, this.ongetNewBoardCompletedDelegate, userState);
        }
    }
}
